/* parameter is a hash like this:
  { msg: msgId,
    actns: [actnId1, actnId2, ...]
    pic: pictureId
  }
  
  fetches the full objects from game.js
  and loads them into state
*/
export const loadItems = (object) => {
  return {
    type: 'LOAD_ITEMS',
    object: object
  }
}
// operates on state.msg.next
// calls loadItem
export const nextMessage = () => {
  return {
    type: 'NEXT_MESSAGE'
  }
}
// populates state.save with default info
export const newSave = () => {
  return {
    type: 'NEW_SAVE'
  }
}
// sets state.save to input value meant for 
// use with electron ipc to grab save info 
// from file (run on launch)
export const loadSave = (save) => {
  return {
    type: 'LOAD_SAVE',
    save: save
  }
}
// loads items from their ids in state.save 
// into state proper, then goes to game screen
export const loadGame = () => {
  return {
    type: 'LOAD_GAME'
  }
}
// big switch statement that does lots of
// shit depending on which key was pressed
export const readKey = (key) => {
  return {
    type: 'READ_KEY',
    key: key
  }
}
// literally one line
export const setCurrentAction = (index, length) => {
  return {
    type: 'SET_CURRENT_ACTION',
    index: index,
    length: length
  }
}
// also literally one line
export const removeCurrentAction = () => {
  return {
    type: 'REMOVE_CURRENT_ACTION'
  }
}
// more switch statements hooray
// does what it says it does tho basically
export const invokeAction = () => {
  return {
    type: 'INVOKE_ACTION'
  }
}
// we literally need to use the store to have a 
// typewriter effect because react-redux is stupid 
// ... so here it is
export const type = (char, more) => {
  return {
    type: 'TYPE',
    char: char,
    more: more
  }
}
// for impatient people
export const completeType = () => {
  return {
    type: 'COMPLETE_TYPE'
  }
}
// a queue of all the... timeout keys? generated by the 
// repeated calls to setTimeout made when calling TYPE. 
// we have to manually clear the timeout on these keys 
// if we want to abort typing, or else currentText will
// continue receiving those characters while it's trying
// to write the next line. (done in TextBoxContainer)
export const setTypeQueue = (queue) => {
  return {
    type: 'SET_TYPE_QUEUE',
    queue: queue
  }
}
